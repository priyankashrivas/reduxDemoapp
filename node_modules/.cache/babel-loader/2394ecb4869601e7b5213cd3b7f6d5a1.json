{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/task/myapp/src/components/userpost/PostForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar PostForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostForm, _React$Component);\n\n  function PostForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"Field \".concat(meta.error && meta.touched ? 'error' : ' ');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        placeholder: label,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.renderSelect = function (_ref2) {\n      var input = _ref2.input,\n          label = _ref2.label,\n          meta = _ref2.meta;\n      var className = \"Field \".concat(meta.error && meta.touched ? 'error' : ' ');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, label), React.createElement(\"select\", Object.assign({}, input, {\n        placeholder: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        value: \"publish\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Publish\"), React.createElement(\"option\", {\n        value: \"future\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Future\"), React.createElement(\"option\", {\n        value: \"draft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Draft\"), React.createElement(\"option\", {\n        value: \"pending\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Pending\"), React.createElement(\"option\", {\n        value: \"draft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Private\")), _this.renderError(meta));\n    };\n\n    _this.renderContent = function (_ref3) {\n      var input = _ref3.input,\n          label = _ref3.label,\n          meta = _ref3.meta;\n      var className = \"Field \".concat(meta.error && meta.touched ? 'error' : ' ');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, label), React.createElement(\"textarea\", Object.assign({}, input, {\n        placeholder: label,\n        rows: \"10\",\n        cols: \"30\",\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(PostForm, [{\n    key: \"renderError\",\n    value: function renderError(_ref4) {\n      var error = _ref4.error,\n          touched = _ref4.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        placeholder: \"Enter title\",\n        label: \"Enter title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"content\",\n        component: this.renderContent,\n        placeholder: \"enter description\",\n        label: \"Enter description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"status\",\n        component: this.renderSelect,\n        placeholder: \"Enter status\",\n        label: \"Status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"submit\"), React.createElement(\"button\", {\n        className: \"ui button red\",\n        disabled: this.props.pristine || this.props.submitting,\n        onClick: this.props.reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Clear\")));\n    }\n  }]);\n\n  return PostForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var error = {};\n\n  if (!formValues.title) {\n    error.title = \"Title required\";\n  } else if (formValues.title.length > 20) {\n    error.title = 'Max length is 20 character';\n  }\n\n  if (!formValues.content) {\n    error.content = \"Content can't be empty\";\n  } else if (formValues.content.length < 3) {\n    error.content = 'Content should be more than 3 characters';\n  } else if (formValues.content.length > 3) {\n    error.content = 'Content should be more than 3 characters';\n  }\n\n  if (!formValues.status) {\n    error.status = \"Select status.............!!!\";\n  }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(PostForm);","map":{"version":3,"sources":["/home/priyanka/task/myapp/src/components/userpost/PostForm.js"],"names":["React","Field","reduxForm","PostForm","renderInput","input","label","meta","className","error","touched","renderError","renderSelect","renderContent","onSubmit","formValues","props","handleSubmit","pristine","submitting","reset","Component","validate","title","length","content","status","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\n\nclass PostForm extends React.Component {\n    \n    renderError({error,touched}){\n        if(touched && error){\n            return (\n                <div className=\"ui error message\">\n                    <div className =\"header\" >{error}</div>\n                </div>\n            );\n        }\n    }\n    \n\n    renderInput = ({input,label,meta}) => {\n        const className=`Field ${meta.error && meta.touched ? 'error' : ' '}`;\n        return (\n            <div className ={className}>\n                <label>{label}</label>\n                <input {...input} placeholder ={label}autoComplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        );  \n    }\n\n    renderSelect =({input,label,meta}) => {\n        const className=`Field ${meta.error && meta.touched ? 'error' : ' '}`;\n        return (\n            <div className={className}>\n              <label>\n                {label}\n              </label>\n              <select {...input} placeholder ={label}>\n                <option></option>\n                <option value=\"publish\">Publish</option>\n                <option value=\"future\">Future</option>\n                <option value=\"draft\">Draft</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"draft\">Private</option> \n              </select>\n              {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    renderContent = ({input,label,meta}) => {\n        const className=`Field ${meta.error && meta.touched ? 'error' : ' '}`;\n        return (\n            <div className ={className}>\n                <label>{label}</label>\n                <textarea {...input} placeholder ={label} rows=\"10\" cols=\"30\"autoComplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        );  \n    }\n    \n    onSubmit = formValues =>{\n        this.props.onSubmit(formValues);\n    };\n\n    render() {\n        return (\n            <form onSubmit = {this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field \n                    name =\"title\" \n                    component ={this.renderInput} \n                    placeholder ='Enter title'\n                    label=\"Enter title\" \n                />\n                <Field \n                    name =\"content\" \n                    component={this.renderContent}  \n                    placeholder ='enter description' \n                    label=\"Enter description\" \n                />\n                <Field \n                    name =\"status\" \n                    component={this.renderSelect}  \n                    placeholder ='Enter status'\n                    label=\"Status\"\n                />\n                \n                <div>\n                    <button className = \"ui button primary\">submit</button>\n                    <button className='ui button red' disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>\n                        Clear \n                    </button>\n                </div>\n            </form>\n        );\n    }  \n}\n\nconst validate =(formValues) => {\n    const error ={};\n    if(!formValues.title){\n        error.title= \"Title required\";\n    }else if(formValues.title.length>20){\n        error.title = 'Max length is 20 character'\n    }\n\n    if(!formValues.content){\n        error.content=\"Content can't be empty\";\n    }else if(formValues.content.length<3){\n        error.content = 'Content should be more than 3 characters'\n    }else if(formValues.content.length>3){\n        error.content = 'Content should be more than 3 characters'\n    }\n\n    if(!formValues.status){\n        error.status = \"Select status.............!!!\";\n    }\n    return error;\n}\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate:validate\n})(PostForm);\n\n"]},"metadata":{},"sourceType":"module"}