{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/Downloads/React_Demo-master/src/components/user/UserLogin.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { signIn } from '../../actions';\nimport { connect } from 'react-redux'; //import {validation} from '../../validation'\n\nvar SignIn =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SignIn, _React$Component);\n\n  function SignIn() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SignIn);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SignIn)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderLoginForm = function (_ref) {\n      var input = _ref.input,\n          idLable = _ref.idLable,\n          inputType = _ref.inputType,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        id: idLable,\n        type: inputType,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      })), _this.renderLoginError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.SignIn(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(SignIn, [{\n    key: \"renderLoginError\",\n    value: function renderLoginError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, error));\n      }\n    }\n    /* This is helper functoin for Field's component props\n    which holds formProps param by-default and this is object.\n    Currently we are destructing our input object from formProps.\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Login Here\"), React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Field, {\n        inputType: \"text\",\n        name: \"username\",\n        component: this.renderLoginForm,\n        idLable: \"username\",\n        label: \"Enter username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"password\",\n        name: \"password\",\n        component: this.renderLoginForm,\n        idLable: \"psw\",\n        label: \"Enter Password\",\n        pattern: \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\",\n        title: \"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return SignIn;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.username) {\n    errors.username = \"no username!!!\";\n  }\n  /* let limitLength = formValues.username.length;\n  if(limitLength){\n    errors.username = \"less than defiened limit\";\n  }\n  */\n\n\n  if (!formValues.password) {\n    errors.password = \"no password!!!\";\n  }\n\n  return errors;\n};\n/* reduxForm returns a function and we \nimmediately pass that function to class StreamCreate */\n\n\nvar loginRedux = reduxForm({\n  form: 'loginForm',\n  validate: validate\n})(UserLogin);\nexport default connect(null, {\n  signIn: signIn\n})(loginRedux);","map":{"version":3,"sources":["/home/priyanka/Downloads/React_Demo-master/src/components/user/UserLogin.js"],"names":["React","Field","reduxForm","signIn","connect","SignIn","renderLoginForm","input","idLable","inputType","label","meta","className","error","touched","renderLoginError","onSubmit","formValues","props","handleSubmit","Component","validate","errors","username","password","loginRedux","form","UserLogin"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport {signIn} from '../../actions'\nimport { connect } from 'react-redux';\n//import {validation} from '../../validation'\n\nclass SignIn extends React.Component {\n\n  renderLoginError({error,touched}){\n    if(touched && error){\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  /* This is helper functoin for Field's component props\n  which holds formProps param by-default and this is object.\n  Currently we are destructing our input object from formProps.\n  */\n renderLoginForm = ({input,idLable,inputType, label,meta}) => {\n  const className= `field ${meta.error && meta.touched ? 'error' : '' }`;\n  return (\n    <div className={className}>\n      <label>\n        {label}\n      </label>\n      <input {...input} id={idLable} type={inputType} autoComplete=\"off\"/>\n      {this.renderLoginError(meta)}\n    </div>\n  )\n}\n\n\nonSubmit = formValues => {\n  this.props.SignIn(formValues);\n}\n\n\n  render () {\n    return (\n      <div>\n        <h3>Login Here</h3>\n\n         {/* this.props.handleSubmit() auto call the preventDefault */}\n       \n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n        {/* name props in field is for manage the form field\n            and it is required props for field and all the props are send\n            to helper function by component */}\n        \n        <Field \n          inputType='text'\n          name='username'\n          component={this.renderLoginForm}\n          idLable='username'\n          label='Enter username'\n        />\n        <Field \n          inputType='password' \n          name='password' \n          component={this.renderLoginForm} \n          idLable='psw' \n          label='Enter Password'\n          pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\"\n          title=\"Must contain at least one number and one uppercase and\n            lowercase letter, and at least 8 or more characters\"\n        />\n        <button className=\"ui button primary\" >Submit</button>\n      </form>\n      </div>      \n    )\n  }\n}\n\n\nconst validate = formValues => {\n  const errors = {};\n  \n  if(!formValues.username){\n    errors.username = \"no username!!!\";\n    \n  }\n  /* let limitLength = formValues.username.length;\n  if(limitLength){\n    errors.username = \"less than defiened limit\";\n  }\n */\n  if(!formValues.password){\n    errors.password = \"no password!!!\";\n  }\n\n  return errors;\n};\n\n\n/* reduxForm returns a function and we \nimmediately pass that function to class StreamCreate */\n const loginRedux = reduxForm({\n    form: 'loginForm',\n    validate\n  })(UserLogin);\n\n  export default connect(null,{signIn})(loginRedux);\n\n"]},"metadata":{},"sourceType":"module"}