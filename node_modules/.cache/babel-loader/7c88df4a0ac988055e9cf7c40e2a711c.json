{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/task/myapp/src/components/userpost/PostList.js\";\nimport React from 'react';\nimport { postList } from '../../actions';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nvar PostList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostList, _React$Component);\n\n  function PostList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.componentDidMount = function (renderPostList) {\n      _this.props.postList(renderPostList = function renderPostList(feedback) {\n        console.log(feedback);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PostList, [{\n    key: \"renderAdmin\",\n    value: function renderAdmin(post) {\n      //if(post.userId === this.props.currentUserId){\n      return React.createElement(\"div\", {\n        className: \"right floated content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"post/update/\".concat(post.id),\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"Edit\"), React.createElement(Link, {\n        to: \"post/delete/\".concat(post.id),\n        className: \"ui button negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"Delete\"));\n    }\n  }, {\n    key: \"renderList\",\n    value: function renderList() {\n      var _this2 = this;\n\n      return this.props.posts.map(function (post) {\n        return React.createElement(\"div\", {\n          className: \"item\",\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, _this2.renderAdmin(post), React.createElement(\"i\", {\n          className: \"large middle aligned icon profile\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/post/view/\".concat(post.id),\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, post.title), React.createElement(\"div\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, post.description)));\n      });\n    }\n  }, {\n    key: \"renderCreate\",\n    value: function renderCreate() {\n      //if(this.props.isSignedIn){\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: 'right'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/post/create\",\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"create post\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \" \", React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Post List\")), React.createElement(\"div\", {\n        className: \"ui celled list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.renderList()), this.renderCreate());\n    }\n  }]);\n\n  return PostList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    posts: state(state.posts) //currentUserId : state.auth.userId,\n    //isSignedIn : state.auth.isSignedIn\n\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postList: postList\n})(PostList);","map":{"version":3,"sources":["/home/priyanka/task/myapp/src/components/userpost/PostList.js"],"names":["React","postList","connect","Link","PostList","componentDidMount","renderPostList","props","feedback","console","log","post","id","posts","map","renderAdmin","title","description","textAlign","renderList","renderCreate","Component","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { postList } from '../../actions';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom'\n\nclass PostList extends React.Component {\n  \n  componentDidMount = (renderPostList) => {\n    this.props.postList(renderPostList = (feedback) => {\n      console.log(feedback);\n    })\n  }\n  renderAdmin(post){\n    //if(post.userId === this.props.currentUserId){\n        return (\n            <div className ='right floated content'>\n                <Link to={`post/update/${post.id}`} className ='ui button primary'>Edit</Link>\n                <Link to={`post/delete/${post.id}`} className ='ui button negative'>Delete</Link>    \n            </div>\n        );\n  }\n\n  renderList(){\n    return this.props.posts.map(post => {\n       return (\n           <div className ='item' key ={post.id}>\n               {this.renderAdmin(post)}\n               <i className =\"large middle aligned icon profile\"/>\n               <div className =\"content\">\n                   <Link to ={`/post/view/${post.id}`} className = 'header'>\n                       {post.title}\n                   </Link>\n                       \n                   <div className =\"description\">\n                       {post.description}\n                   </div>\n               </div>\n           </div>\n       );\n   });\n  }\n\n  renderCreate(){\n    //if(this.props.isSignedIn){\n        return(\n            <div style ={{textAlign: 'right'}}>\n                <Link to =\"/post/create\" className =\"ui button primary\">\n                    create post\n                </Link>\n            </div>\n        );\n  }\n  render () {\n    return (\n      <div>\n        <center> <h3>Post List</h3></center>\n        <div className =\"ui celled list\">{this.renderList()}</div>\n         {this.renderCreate()}\n       \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n    \n  return { \n      posts :state(state.posts),\n      //currentUserId : state.auth.userId,\n      //isSignedIn : state.auth.isSignedIn\n  \n  }; \n};\n\n\nexport default connect(mapStateToProps , { postList })(PostList)\n"]},"metadata":{},"sourceType":"module"}