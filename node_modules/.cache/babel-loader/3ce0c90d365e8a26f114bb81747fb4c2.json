{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/task/myapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/task/myapp/src/components/userpost/PostForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar PostForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostForm, _React$Component);\n\n  function PostForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"Field \".concat(meta.error && meta.touched ? 'error' : ' ');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        placeholder: label,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(PostForm, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        placeholder: \"Enter title\",\n        label: \"Enter title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"content\",\n        component: this.renderInput,\n        placeholder: \"enter description\",\n        label: \"Enter description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"status\",\n        component: this.renderInput,\n        placeholder: \"enter status\",\n        label: \"Status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"submit\"), React.createElement(\"button\", {\n        className: \"ui  button\",\n        disabled: this.props.pristine || this.props.submitting,\n        onClick: this.props.reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Clear Values\")));\n    }\n  }]);\n\n  return PostForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var error = {};\n\n  if (!formValues.title) {\n    error.title = \"you must enter the title\";\n  } else if (formValues.title.length > 15) {\n    error.title = 'Max length is 15 character';\n  }\n\n  if (!formValues.content) {\n    error.content = \"you must enter the description\";\n  } else if (formValues.content.length > 200) {\n    error.content = 'Max length is 200 character';\n  } else if (formValues.content.length < 10) {\n    error.content = 'Min length is 10 character';\n  }\n\n  if (!formValues.status) {\n    error.status = \"Select status.............!!!\";\n  }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(PostForm);","map":{"version":3,"sources":["/home/priyanka/task/myapp/src/components/userpost/PostForm.js"],"names":["React","Field","reduxForm","PostForm","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","handleSubmit","pristine","submitting","reset","Component","validate","title","length","content","status","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\n\nclass PostForm extends React.Component {\n    \n    renderError({error,touched}){\n        if(touched && error){\n            return (\n                <div className=\"ui error message\">\n                    <div className =\"header\" >{error}</div>\n                </div>\n            );\n        }\n    }\n    \n\n    renderInput = ({input,label,meta}) => {\n        const className=`Field ${meta.error && meta.touched ? 'error' : ' '}`;\n        return (\n            <div className ={className}>\n                <label>{label}</label>\n                <input {...input} placeholder ={label}autoComplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        );  \n    }\n    \n   \n    onSubmit = formValues =>{\n        this.props.onSubmit(formValues);\n    };\n\n    render() {\n        return (\n            <form onSubmit = {this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field \n                    name =\"title\" \n                    component ={this.renderInput} \n                    placeholder ='Enter title'\n                    label=\"Enter title\" \n                />\n                <Field \n                    name =\"content\" \n                    component={this.renderInput}  \n                    placeholder ='enter description' \n                    label=\"Enter description\"  \n                />\n                <Field \n                    name =\"status\" \n                    component={this.renderInput}  \n                    placeholder ='enter status'\n                    label=\"Status\"\n                />\n                \n                <div>\n                    <button className = \"ui button primary\">submit</button>\n                    <button className='ui  button' disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>\n                        Clear Values\n                    </button>\n                </div>\n            </form>\n        );\n    }  \n}\n\nconst validate =(formValues) => {\n    const error ={};\n    if(!formValues.title){\n        error.title= \"you must enter the title\";\n    }else if(formValues.title.length>15){\n        error.title = 'Max length is 15 character'\n    }\n\n    if(!formValues.content){\n        error.content=\"you must enter the description\";\n    }else if(formValues.content.length>200){\n        error.content = 'Max length is 200 character'\n    }else if(formValues.content.length<10){\n        error.content = 'Min length is 10 character'\n    }\n    if(!formValues.status){\n        error.status = \"Select status.............!!!\";\n    }\n    return error;\n}\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate:validate\n})(PostForm);\n\n"]},"metadata":{},"sourceType":"module"}