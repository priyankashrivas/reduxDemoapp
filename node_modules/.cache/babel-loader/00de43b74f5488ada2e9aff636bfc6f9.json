{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/Downloads/React_Demo-master/src/components/user/UserForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport _ from 'lodash';\n\nvar UserForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserForm, _React$Component);\n\n  function UserForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderField = function (_ref) {\n      var input = _ref.input,\n          idLable = _ref.idLable,\n          inputType = _ref.inputType,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        id: idLable,\n        type: inputType,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), _this.renderRegisterError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      formValues = _.omit(formValues, 'cpassword');\n\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(UserForm, [{\n    key: \"renderRegisterError\",\n    value: function renderRegisterError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Field, {\n        inputType: \"text\",\n        name: \"first_name\",\n        component: this.renderRegisterForm,\n        idLable: \"fname\",\n        label: \"Enter First Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"text\",\n        name: \"last_name\",\n        component: this.renderRegisterForm,\n        idLable: \"lname\",\n        label: \"Enter Last Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"email\",\n        name: \"email\",\n        component: this.renderRegisterForm,\n        idLable: \"email\",\n        label: \"Enter Email ID\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"text\",\n        name: \"username\",\n        component: this.renderRegisterForm,\n        idLable: \"username\",\n        label: \"Enter User Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"password\",\n        name: \"password\",\n        component: this.renderRegisterForm,\n        idLable: \"psw\",\n        label: \"Enter Password\",\n        pattern: \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\",\n        title: \"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"password\",\n        name: \"cpassword\",\n        component: this.renderRegisterForm,\n        idLable: \"cpsw\",\n        label: \"Confirm Password\",\n        pattern: \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\",\n        title: \"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return UserForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.username) {\n    errors.username = \"no username!!!\";\n  }\n\n  if (!formValues.first_name) {\n    errors.first_name = \"no first name!!!\";\n  }\n\n  if (!formValues.last_name) {\n    errors.last_name = \"no last name!!!\";\n  }\n\n  if (!formValues.email) {\n    errors.email = \"no email!!!\";\n  }\n\n  if (!formValues.password) {\n    errors.password = \"no password!!!\";\n  }\n\n  if (!formValues.cpassword) {\n    errors.cpassword = \"no confirm Password!!!\";\n  }\n\n  if (formValues.password !== formValues.cpassword) {\n    errors.cpassword = \"mismatch password!!!\";\n  }\n  /* let limitLength = formValues.username.length;\n  if(limitLength){\n    errors.username = \"less than defiened limit\";\n  }\n  */\n\n\n  return errors;\n};\n/* reduxForm returns a function and we \nimmediately pass that function to class StreamCreate */\n\n\nexport default reduxForm({\n  form: 'registerForm',\n  validate: validate\n})(UserForm);","map":{"version":3,"sources":["/home/priyanka/Downloads/React_Demo-master/src/components/user/UserForm.js"],"names":["React","Field","reduxForm","_","UserForm","renderField","input","idLable","inputType","label","meta","className","error","touched","renderRegisterError","onSubmit","formValues","omit","props","handleSubmit","renderRegisterForm","Component","validate","errors","username","first_name","last_name","email","password","cpassword","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport _ from 'lodash'\nclass UserForm extends React.Component {\n  \n  renderRegisterError({error,touched}){\n    if(touched && error){\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n renderField = ({input,idLable,inputType, label,meta}) => {\n   const className= `field ${meta.error && meta.touched ? 'error' : '' }`;\n    return (\n      <div className={className}>\n        <label>\n          {label}\n        </label>\n        <input {...input} id={idLable} type={inputType} autoComplete=\"off\"/>\n        {this.renderRegisterError(meta)}\n      </div>\n    )\n  }\n\n  onSubmit = formValues => {\n    formValues= _.omit(formValues,'cpassword')\n    this.props.onSubmit(formValues);\n  }\n\n  render () {\n    return (\n      <div>\n       \n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n        {/* name props in field is for manage the form field\n            and it is required props for field and all the props are send\n            to helper function by component */}\n        \n        <Field \n          inputType='text'\n          name='first_name'\n          component={this.renderRegisterForm}\n          idLable='fname'\n          label='Enter First Name'\n        />\n        <Field \n          inputType='text'\n          name='last_name'\n          component={this.renderRegisterForm}\n          idLable='lname'\n          label='Enter Last Name'\n        />\n        <Field \n          inputType='email'\n          name='email'\n          component={this.renderRegisterForm}\n          idLable='email'\n          label='Enter Email ID'\n        />\n        <Field \n          inputType='text'\n          name='username'\n          component={this.renderRegisterForm}\n          idLable='username'\n          label='Enter User Name'\n        />\n        <Field \n          inputType='password' \n          name='password' \n          component={this.renderRegisterForm} \n          idLable='psw' \n          label='Enter Password'\n          pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\"\n          title=\"Must contain at least one number and one uppercase and\n            lowercase letter, and at least 8 or more characters\"\n        />\n        <Field \n          inputType='password' \n          name='cpassword' \n          component={this.renderRegisterForm} \n          idLable='cpsw' \n          label='Confirm Password'\n          pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\"\n          title=\"Must contain at least one number and one uppercase and\n            lowercase letter, and at least 8 or more characters\"\n        />\n        <button className=\"ui button primary\" >Submit</button>\n      </form>\n      </div>      \n    )\n  }\n}\n\n\nconst validate = formValues => {\n  const errors = {};\n  \n  if(!formValues.username){\n    errors.username = \"no username!!!\";\n  }\n\n  if(!formValues.first_name){\n    errors.first_name = \"no first name!!!\";\n  }\n\n  if(!formValues.last_name){\n    errors.last_name = \"no last name!!!\";\n  }\n\n  if(!formValues.email){\n    errors.email = \"no email!!!\"; \n  }\n\n  if(!formValues.password){\n    errors.password = \"no password!!!\";\n  }\n\n  if(!formValues.cpassword){\n    errors.cpassword = \"no confirm Password!!!\";\n  }\n\n  if(formValues.password !== formValues.cpassword){\n    errors.cpassword = \"mismatch password!!!\";\n  }\n\n  /* let limitLength = formValues.username.length;\n  if(limitLength){\n    errors.username = \"less than defiened limit\";\n  }\n */\n  return errors;\n};\n\n\n/* reduxForm returns a function and we \nimmediately pass that function to class StreamCreate */\nexport default reduxForm({\n    form: 'registerForm',\n    validate\n  })(UserForm);\n\n"]},"metadata":{},"sourceType":"module"}