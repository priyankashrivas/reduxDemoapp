{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/Downloads/React_Demo-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/Downloads/React_Demo-master/src/components/post/PostCreate.js\";\nimport React from 'react';\n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form';\nimport { postCreate } from '../../actions';\nimport { connect } from 'react-redux'; //import {validation} from '../../validation'\n\nvar PostCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostCreate, _React$Component);\n\n  function PostCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderOptions = function (_ref) {\n      var input = _ref.input,\n          idLable = _ref.idLable;\n      var selectOption = ['public', 'private', 'future', 'draft', 'pending'];\n      console.log(selectOption);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"select\", Object.assign({\n        id: idLable\n      }, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Select Post Status\")));\n    };\n\n    _this.renderLoginForm = function (_ref2) {\n      var input = _ref2.input,\n          idLable = _ref2.idLable,\n          inputType = _ref2.inputType,\n          label = _ref2.label,\n          meta = _ref2.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : ''); //console.log(selectOption)\n\n      if (inputType === 'text') {\n        return React.createElement(\"div\", {\n          className: className,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, label), React.createElement(\"input\", Object.assign({}, input, {\n          id: idLable,\n          type: inputType,\n          autoComplete: \"off\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        })), _this.renderLoginError(meta));\n      } else {\n        return React.createElement(\"div\", {\n          className: className,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, label), function (_ref3) {\n          var input = _ref3.input,\n              idLable = _ref3.idLable;\n          return _this.renderOptions;\n        }, _this.renderLoginError(meta));\n      }\n    };\n\n    _this.onSubmit = function (formValues) {\n      //this.props.loginUser(formValues);\n      console.log(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(PostCreate, [{\n    key: \"renderLoginError\",\n    value: function renderLoginError(_ref4) {\n      var error = _ref4.error,\n          touched = _ref4.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, error));\n      }\n    }\n    /* This is helper functoin for Field's component props\n    which holds formProps param by-default and this is object.\n    Currently we are destructing our input object from formProps.\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Create a new post here\"), React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Field, {\n        inputType: \"text\",\n        name: \"title\",\n        component: this.renderLoginForm,\n        idLable: \"title\",\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"text\",\n        name: \"description\",\n        component: this.renderLoginForm,\n        idLable: \"desc\",\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(Field, {\n        inputType: \"select\",\n        name: \"status\",\n        component: this.renderLoginForm,\n        idLable: \"status\",\n        label: \"Select Post Status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return PostCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"no title!!!\";\n  }\n  /* let limitLength = formValues.username.length;\n  if(limitLength){\n    errors.username = \"less than defiened limit\";\n  }\n  */\n\n\n  if (!formValues.description) {\n    errors.description = \"no description!!!\";\n  }\n\n  if (!formValues.status) {\n    errors.status = \"Select status!!!\";\n  }\n\n  return errors;\n};\n/* reduxForm returns a function and we \nimmediately pass that function to class StreamCreate */\n\n\nvar postRedux = reduxForm({\n  form: 'postCreateForm',\n  validate: validate\n})(PostCreate);\nexport default connect(null, {\n  postCreate: postCreate\n})(postRedux);","map":{"version":3,"sources":["/home/priyanka/Downloads/React_Demo-master/src/components/post/PostCreate.js"],"names":["React","Field","reduxForm","postCreate","connect","PostCreate","renderOptions","input","idLable","selectOption","console","log","renderLoginForm","inputType","label","meta","className","error","touched","renderLoginError","onSubmit","formValues","props","handleSubmit","Component","validate","errors","title","description","status","postRedux","form"],"mappings":"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","sourcesContent":["import React from 'react'\n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form'\nimport {postCreate} from '../../actions'\nimport { connect } from 'react-redux';\n//import {validation} from '../../validation'\n\nclass PostCreate extends React.Component {\n\n  renderLoginError({error,touched}){\n    if(touched && error){\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  /* This is helper functoin for Field's component props\n  which holds formProps param by-default and this is object.\n  Currently we are destructing our input object from formProps.\n  */\n\n  renderOptions = ({input,idLable}) => {\n    const selectOption= ['public','private','future','draft','pending'];\n    console.log(selectOption)\n    return (\n      <div>\n        <select id={idLable} {...input}  >\n          <option>Select Post Status</option>\n          {/* <option value={[0]}>Publish</option>\n          <option>Future</option>\n          <option>Draft</option>\n          <option>Pending</option>\n          <option>Private</option> */}\n        </select>\n      </div>\n    )\n\n  }\n renderLoginForm = ({input,idLable,inputType, label,meta}) => {\n  const className= `field ${meta.error && meta.touched ? 'error' : '' }`;\n  //console.log(selectOption)\n  if(inputType=== 'text'){\n    return (\n      <div className={className}>\n        <label>\n          {label}\n        </label>\n        <input {...input} id={idLable} type={inputType} autoComplete=\"off\"/>\n        {this.renderLoginError(meta)}\n      </div>\n    )\n  }else {\n    return (\n      <div className={className}>\n        <label>\n          {label}\n        </label>\n        {({input,idLable})=>this.renderOptions}\n        \n        {this.renderLoginError(meta)}\n      </div>\n    )\n  }\n}\n\n\nonSubmit = formValues => {\n  //this.props.loginUser(formValues);\n  console.log(formValues)\n}\n\n\n  render () {\n    return (\n      <div>\n        <h3>Create a new post here</h3>\n\n         {/* this.props.handleSubmit() auto call the preventDefault */}\n       \n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n        {/* name props in field is for manage the form field\n            and it is required props for field and all the props are send\n            to helper function by component */}\n        \n        <Field \n          inputType='text'\n          name='title'\n          component={this.renderLoginForm}\n          idLable='title'\n          label='Enter Title'\n        />\n        <Field \n          inputType='text' \n          name='description' \n          component={this.renderLoginForm} \n          idLable='desc' \n          label='Enter Description'          \n        />\n        <Field \n          inputType='select' \n          name='status' \n          component={this.renderLoginForm} \n          idLable='status' \n          label='Select Post Status'          \n        />\n        <button className=\"ui button primary\" >Submit</button>\n      </form>\n      </div>      \n    )\n  }\n}\n\n\nconst validate = formValues => {\n  const errors = {};\n  \n  if(!formValues.title){\n    errors.title = \"no title!!!\";\n    \n  }\n  /* let limitLength = formValues.username.length;\n  if(limitLength){\n    errors.username = \"less than defiened limit\";\n  }\n */\n  if(!formValues.description){\n    errors.description = \"no description!!!\";\n  }\n\n  if(!formValues.status){\n    errors.status = \"Select status!!!\";\n  }\n\n  return errors;\n};\n\n\n/* reduxForm returns a function and we \nimmediately pass that function to class StreamCreate */\n const postRedux = reduxForm({\n    form: 'postCreateForm',\n    validate\n  })(PostCreate);\n\n  export default connect(null,{postCreate})(postRedux);\n\n"]},"metadata":{},"sourceType":"module"}